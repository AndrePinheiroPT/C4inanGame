<div class="container">
    <button class="information"><img src="img/gear.png" class="gear"></button>
    <header>
        <h1 class="title">
            C4INAN <br> GAME
        </h1>
    </header>
    <section class="game-home">
        <div class='button-list'>
            <button class="button hight start">COMEÇAR!</button>
            <br>
            <a href="/ranking"><button class="button medium">RANKING</button></a>
            <br>
            <button class="button low rules">REGRAS</button>
            <br>
            <button class="button low contact">CONTACTO</button>
            <br>
            <a href="/logout"><button class="button medium">LOGOUT</button></a>
        </div>
    </section>
    <div>
        <div class="coins">
            Moedas<br>
            {{user.coins}}
        </div>
        <div class="hightScore">
            Maximo<br>
            {{user.hightscore}}
        </div>
    </div>
    <div class="footer">
        Copyright ©C4INAN - 2020 <br>
        Todos os direitos reservados
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script type="module">
    const socket = io()
    
    import { startGame, 
        reloadButtons,
        reloadGame,
        image,
        continueGame,
        gameButtons, 
        gameHome, 
        angryDOM, 
        happyDOM, 
        sadDOM,
        scoreDiv,
        coinDiv,
        hightscoreDiv,
        gameoverTitle,
        bronzeButton,
        blueButton,
        purpleButton,
        redButton
    } from '/js/elements.js'
    
    import { disabledAnimations } from '/js/messages.js'

    socket.on('connect', () => {
        const playerId = socket.id
        console.log(`> Socket ${playerId} connected`)

        startGame.onclick = () => socket.emit('startClicked', null)
        reloadGame.onclick = () => socket.emit('startClicked', null)
        continueGame.onclick = () =>  socket.emit('continueClicked', null)

        socket.on('activateColors', ({ hightscore }) => {
            if(hightscore >= 80){
                bronzeButton.disabled = false
            }else if(hightscore >= 180){
                blueButton.disabled = false
            }else if(hightscore >= 380){
                purpleButton.disabled = false
            }else if(hightscore >= 600){
                redButton.disabled = false
            }
        })

        socket.on('startGame', ({score, imageSrc}) => {
            gameHome.innerHTML = ''
            // render score
            scoreDiv.innerHTML = `Pontuação: ${score}`
            gameHome.appendChild(scoreDiv)
            // render image
            image.setAttribute('src', imageSrc)
            gameHome.appendChild(image)
            // Render buttons
            gameHome.appendChild(gameButtons)

        })

        socket.on('updateCoins', ({ coins }) => {
            if(disabledAnimations){
                coinDiv.innerHTML = `Moedas<br> ${coins}`
            }else{
                coinDiv.innerHTML = `Moedas<br> ${coins}`
                coinDiv.style.borderWidth = '15px'
                setTimeout(() => coinDiv.style.borderWidth = '5px', 300)
            }
        })

        socket.on('updateScore', ({ score, isGold }) => {
            if(isGold){
                scoreDiv.style.borderColor = '#FFD700'
            }else{
                scoreDiv.style.borderColor = 'black'
            }
            
            if(disabledAnimations){
                scoreDiv.innerHTML = `Pontuação: ${score}`
            }else{
                scoreDiv.innerHTML = `Pontuação: ${score}`
                scoreDiv.style.borderWidth = '15px'
                setTimeout(() => scoreDiv.style.borderWidth = '5px', 300)
            }
            
        })

        socket.on('updateHightscore', ({ hightscore }) => {
            switch(hightscore){
                case 80:
                    bronzeButton.disabled = false
                    break
                case 180:
                    blueButton.disabled = false
                    break
                case 380:
                    purpleButton.disabled = false
                    break
                case 600:
                    redButton.disabled = false
                    break
            }

            if(disabledAnimations){
                hightscoreDiv.innerHTML = `Maximo<br> ${hightscore}`
            }else{
                hightscoreDiv.innerHTML = `Maximo<br> ${hightscore}`
                hightscoreDiv.style.borderWidth = '15px'
                setTimeout(() => hightscoreDiv.style.borderWidth = '5px', 300)
            }
        })

        socket.on('updateImages', ({ imageSrc }) => {
            image.setAttribute('src', imageSrc)
        })

        socket.on('setGold', ({ type }) => {
            let element = undefined
            switch(type){
                case 'angry':
                    element = angryDOM
                    break
                case 'happy':
                    element = happyDOM
                    break
                case 'sad':
                    element = sadDOM
                    break
            }

            element.setAttribute('class', 'button gold')
        })

        socket.on('setNormal', ({ type }) => {
            let element = undefined
            switch(type){
                case 'angry':
                    element = angryDOM
                    break
                case 'happy':
                    element = happyDOM
                    break
                case 'sad':
                    element = sadDOM
                    break
            }

            element.setAttribute('class', 'button low')
        })

        socket.on('continue', ({ coins, score, imageSrc }) => {
            gameHome.innerHTML = ''
            // render score
            scoreDiv.innerHTML = `Pontuação: ${score}`
            gameHome.appendChild(scoreDiv)
            // render image
            image.setAttribute('src', imageSrc)
            gameHome.appendChild(image)
            // Render buttons
            gameHome.appendChild(gameButtons)

            coinDiv.innerHTML = `Moedas<br> ${coins}`
            coinDiv.style.borderWidth = '15px'
            setTimeout(() => coinDiv.style.borderWidth = '5px', 300)
        })

        socket.on('gameOver', ({ coins }) => {
            coins >= 10 ? continueGame.disabled = false : continueGame.disabled = true
            gameHome.removeChild(image)
            gameHome.appendChild(gameoverTitle)
            gameHome.removeChild(gameButtons)
            gameHome.appendChild(reloadButtons)
        })


        angryDOM.onclick = () => socket.emit('buttonPressed', { button: 'angry' })
        happyDOM.onclick = () => socket.emit('buttonPressed', { button: 'happy' })
        sadDOM.onclick = () => socket.emit('buttonPressed', { button: 'sad' })

        socket.on('disconnect', () => {
            console.log(`> Socket ${playerId} disconnected`)
        })
    })
</script>